import { Calendar, Event } from "react-big-calendar";
import "react-big-calendar/lib/css/react-big-calendar.css";

import { daysLocalizer as localizer } from "./getLocalizer";
import { getMessagesES } from "./getMessagesES";
import { useCallback, useEffect, useState } from "react";
import { ModalVisit } from "./ModalVisit";

interface Props {
  events: Event[];
  refetchEvents?: (limits: MonthsRange) => void;
}

enum Priority {
  BAJA = "#B5D6A7",
  MEDIA = "#FFF47A",
  ALTA = "#FD9800",
  URGENTE = "#F55D1E",
}

type MonthsRange = {
  min: {
    month: number;
    year: number;
  };
  max: {
    month: number;
    year: number;
  };
};

export const CalendarComponent = ({ events, refetchEvents }: Props) => {
  const [showModal, setShowModal] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [month, setMonth] = useState<number>(
    new Date().getMonth() === 0 ? 1 : new Date().getMonth() + 1
  );
  const [year, setYear] = useState<number>(new Date().getFullYear());

  const [monthsRange, setMonthsRange] = useState<MonthsRange>({
    min: {
      month: month - 1 < 1 ? 12 : month - 1,
      year: month - 1 < 1 ? year - 1 : year,
    },
    max: {
      month: month + 1 > 12 ? 1 : month + 1,
      year: month + 1 > 12 ? year + 1 : year,
    },
  });

  const eventStyleGetter = (event: Event) => {
    return {
      style: {
        backgroundColor:
          Priority[event.resource.priority as keyof typeof Priority] || "#fff",
        fontSize: ".8em",
        color: "black",
        padding: "0.2rem",
      },
    };
  };

  const handleDoubleClick = useCallback((event: Event) => {
    setSelectedEvent(event);
    setShowModal(true);
  }, []);

  useEffect(() => {
    if (!showModal) setSelectedEvent(null);
  }, [showModal]);

  const handleNavigate = (date: Date) => {
    const newMonth = date.getMonth() + 1;
    const newYear = date.getFullYear();

    if (newMonth !== month || newYear !== year) {
      setMonth(newMonth);
      setYear(newYear);
      setMonthsRange({
        min: {
          month: newMonth - 1 < 1 ? 12 : newMonth - 1,
          year: newMonth - 1 < 1 ? newYear - 1 : newYear,
        },
        max: {
          month: newMonth + 1 > 12 ? 1 : newMonth + 1,
          year: newMonth + 1 > 12 ? newYear + 1 : newYear,
        },
      });

      const must_refetch =
        newMonth === monthsRange.min.month ||
        newMonth === monthsRange.max.month;

      if (refetchEvents && must_refetch) {
        refetchEvents({
          min: {
            month: newMonth - 1 < 1 ? 12 : newMonth - 1,
            year: newMonth - 1 < 1 ? newYear - 1 : newYear,
          },
          max: {
            month: newMonth + 1 > 12 ? 1 : newMonth + 1,
            year: newMonth + 1 > 12 ? newYear + 1 : newYear,
          },
        });
      }
    }
  };

  return (
    <>
      <Calendar
        culture="es"
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: "calc(100vh - 90px)" }}
        messages={getMessagesES()}
        eventPropGetter={eventStyleGetter}
        popup
        selectable
        timeslots={1}
        step={60}
        onDoubleClickEvent={handleDoubleClick}
        onNavigate={handleNavigate}
      />

      <ModalVisit
        event={selectedEvent}
        showModal={showModal}
        setShowModal={setShowModal}
      />
    </>
  );
};
